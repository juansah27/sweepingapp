services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: sweeping-apps-postgres
    restart: unless-stopped
    env_file:
      - docker.env
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-sweeping_apps}
      - POSTGRES_USER=${POSTGRES_USER:-sweeping_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-sweeping_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "0.0.0.0:5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-sweeping_user} -d ${POSTGRES_DB:-sweeping_apps}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sweeping-apps-network

  # Backend service
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: sweeping-apps-backend
    restart: unless-stopped
    env_file:
      - docker.env
    environment:
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - DB_SERVER=${DB_SERVER:-10.6.13.33\newjda}
      - DB_NAME=${DB_NAME:-Flexo_db}
      - DB_USERNAME=${DB_USERNAME:-fservice}
      - DB_PASSWORD=${DB_PASSWORD:-SophieHappy33}
      - DB_TRUSTED_CONNECTION=${DB_TRUSTED_CONNECTION:-no}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-sweeping_apps}
      - POSTGRES_USER=${POSTGRES_USER:-sweeping_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-sweeping_password}
    volumes:
      - ./backend/logs:/app/logs
      - ./JobGetOrder:/app/JobGetOrder
    ports:
      - "0.0.0.0:8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - sweeping-apps-network
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # Frontend service
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: sweeping-apps-frontend
    restart: unless-stopped
    ports:
      - "0.0.0.0:80:80"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - sweeping-apps-network

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: sweeping-apps-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "0.0.0.0:6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sweeping-apps-network

  # Nginx reverse proxy (optional, for production)
  nginx-proxy:
    image: nginx:alpine
    container_name: sweeping-apps-proxy
    restart: unless-stopped
    ports:
      - "443:443"
    volumes:
      - ./nginx-proxy.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - sweeping-apps-network
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  sweeping-apps-network:
    driver: bridge
